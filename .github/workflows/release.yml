name: Release

on:
  push:
    tags:
      - 'v*'

env:
  CARGO_TERM_COLOR: always

jobs:
  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
    
    steps:
    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: Release ${{ github.ref }}
        draft: false
        prerelease: false

  build-release:
    name: Build Release
    needs: create-release
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            name: linux-x86_64
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            name: windows-x86_64
          - os: macos-latest
            target: x86_64-apple-darwin
            name: macos-x86_64
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: ${{ matrix.target }}
    
    - name: Install system dependencies (Ubuntu)
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y libasound2-dev libudev-dev
    
    - name: Build release
      run: cargo build --release --target ${{ matrix.target }}
    
    - name: Create archive (Unix)
      if: matrix.os != 'windows-latest'
      run: |
        mkdir old-times-${{ matrix.name }}
        cp target/${{ matrix.target }}/release/oldtimes-client old-times-${{ matrix.name }}/
        cp target/${{ matrix.target }}/release/oldtimes-headless old-times-${{ matrix.name }}/
        cp README.md LICENSE GRAPHICS_GUIDE.md old-times-${{ matrix.name }}/
        cp -r assets old-times-${{ matrix.name }}/
        cp -r examples old-times-${{ matrix.name }}/
        tar czf old-times-${{ matrix.name }}.tar.gz old-times-${{ matrix.name }}
    
    - name: Create archive (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        mkdir old-times-${{ matrix.name }}
        cp target/${{ matrix.target }}/release/oldtimes-client.exe old-times-${{ matrix.name }}/
        cp target/${{ matrix.target }}/release/oldtimes-headless.exe old-times-${{ matrix.name }}/
        cp README.md LICENSE GRAPHICS_GUIDE.md old-times-${{ matrix.name }}/
        cp -r assets old-times-${{ matrix.name }}/
        cp -r examples old-times-${{ matrix.name }}/
        Compress-Archive -Path old-times-${{ matrix.name }} -DestinationPath old-times-${{ matrix.name }}.zip
    
    - name: Upload Release Asset (Unix)
      if: matrix.os != 'windows-latest'
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.create-release.outputs.upload_url }}
        asset_path: ./old-times-${{ matrix.name }}.tar.gz
        asset_name: old-times-${{ matrix.name }}.tar.gz
        asset_content_type: application/gzip
    
    - name: Upload Release Asset (Windows)
      if: matrix.os == 'windows-latest'
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.create-release.outputs.upload_url }}
        asset_path: ./old-times-${{ matrix.name }}.zip
        asset_name: old-times-${{ matrix.name }}.zip
        asset_content_type: application/zip